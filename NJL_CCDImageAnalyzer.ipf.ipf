#pragma rtGlobals=3		// Use modern global access method and strict wave access.
#include <KBColorizeTraces>
#include <New Polar Graphs>


//*******************************************************************BACKGROUND INFORMATION REGARDING ANALYSIS PROCEDURES**********************************************************************//
//																																											//
//	This is a procedure which loads, manipulates, and analyzes 2D images outputted by the CCD cameras in the RA-SHG experiments of the Hsieh research group at Caltech.				//
//	The first copy of this software was written by Dr. John Harter and later updated and improved by Dr. Nick Laurita in Oct. 2017.  														//
//																																											//
//												Questions regarding the code can be directed to Nick at Laurita.Nicholas@Gmail.com.												//
//																																											//
//******************************************************************************************************************************************************************************************************************************//


//**************************************************************************************INSTRUCTIONS FOR USING THE CODE*****************************************************************************************//
//																																											//
//	1) 	Hit CTRL-2 to open and load the user interface of the analysis palette.																										//
//																																											//
//	2) 	The "Load and Display CCD Images" box at the top contains buttons used for loading and creating plots of CCD images.  Select the size of the image you would like to load, either 		//
//		512 or 1024 pixels and then hit the "Load CCD Image" button to open a dialog which allows you to select an image to be loaded into Igor.  The procedure automatically names the 		//
//		image according to the name of the file, scales the image appropriately, and creates an autoscaled image plot of the data.														//
//																																											//
//		Once an image is loaded it will also be available in the "CCD Images:" drop down menu.  The "Display Image" button will make an image plot of whatever image is selected in this 		//
//		drop down menu.  This allows one to switch between plots of different images very quickly.  The "Update list" button refreshes the drop down menu so that all images in the current 		//
//		data folder are available for selection although this is almost always done automatically.  It may still be useful if the user generates new images independent of the code though.			//
//																																											//
//	3) 	The "Despeckle CCD Images:" panel averages together multiple measurements of the same image and removes the cosmic rays which show up as large spikes in the CCD image.  	//
//		The code requires a specific naming convention so that it knows which waves to average.  The convention is that all names have to be the same but end in "_#" starting from 1 for the 	//
//		first image.  For instance you may have images named "Test_sp_60min_5K_1", "Test_sp_60min_5K_2", "Test_sp_60min_5K_3"... etc.  											//
//																																											//
//		To run the despeckle code simply select any of the images you want to despeckle (it doesn't have to be the one that ends in "_1") in the drop down menu at the top. 					//
//		Then enter in the total number of images to be averaged in "Number of Images".  The "Cap Value" number refers to the value above which the data will be removed.  For instance, a Cap 	//
//		value of 500 means that every pixel with a value above 500 is removed from the image.  Therefore, one should set this value to be a number just above the largest value in your signal.  	//
//		Once these values are set, then hit the "Despeckle" button.  The code looks for images with the names "Name_1", "Name_2", "Name_3"...etc and averages and despeckles them into 	//
//		a single wave called "Name_Avg".  The code automattically makes a plot of this averaged image.  It is also then available in the drop down "CCD Image:" menu.						//																											//
//																																											//
//	4)	The Create Petal Plots panel allows the user to adjust the inner, middle, and outer circles in real time.  Petal plots are generated by integrating the signal between the inner and outer	//
//		circles.  Once the circles are set appropriately, hit "Create Petal Plot From Image" to integrate the data in the image and generate a petal plot from the data.  The output of this			//
// 		routine is a wave with the same name as the image but ending with a "_R"  The code also creates a nice polar plot of the data using Igor's "New Polar Graph" package.				//
//																																											//
//		The "Create Petal Plot From Wave" button is used to create a polar plot of any previously generated petal plot wave that ends in "_R".  Just select the wave you would like to plot 		//
//		from the "Petal Plot Wave" drop down menu and hit the "Create Petal Plot From Wave" button to display the data in a polar plot.													//																														//
//******************************************************************************************************************************************************************************************************************************//

//**********************************************************************INSTRUCTIONS FOR ANALYZING TEMPERATURE DEPENDENCE*************************************************************************//
//																																											//
//	1) 	Hit CTRL-3 to open and load the temperature dependence interface of the analysis palette.																					//
//																																											//
//	2) 	Make a TEXT wave called "Temps" and populate it with the temperatures at which data was taken.  For instance, elements can be "5K", "10K", "20K", etc. 							//
//																																											//																																				//
//	3) 	In order for the code to work, each file must be named following a specific convention.  Each file must be named as "BaseString_Temps_#".  For instance a file may be named			//
//		"HBS_ss_10K_1".  Here the Base String is "HBS_ss" because every file will start with this name.  Then the temperature is listed in the name followed by the number of the scan		//
//		which must start at 1.  After making sure the files are named correctly, enter the Base String file name in the "File Name Base String" box at the top of the pallette.					//
//																																											//
//		Enter in the "Number Of Images Per Temperature" so that the program knows how many files to load.  For now there must be the same number of scans at every temperature.			//																											//
//																																											//
//		The "Smooth Images" checkbox allows the user to decide to smooth the images after loading them to improve signal to noise.														//
//																																											//
//	4)	Hit the "Get Data Folder" button.  A file select window should pop up where the user should pick ANY file in the folder with all the data saved in it.  Again, any file can be chosen		//
//		here, the program is only looking for the folder from where to load the data from.																								//
//																																											//
//	5)	Hit the "Load and Despeckle" button to automatically load all the data from the selected folder and despeckle them.  The raw and despeckled images are loaded into separate folders 	//
//		in the data browser which can be viewed using the Load and Display CCD Images Pallette.																					//
//																																											//
//	6) 	Set the Inner, middle, and outer circles with the "Create Petal Plots" pallette on any loaded image.  The code uses the set values of these parameters to make the petal plots for every	//
//		temperature.  Once set appropriately, hit the "Create Petal Plot Waves" to integrate the averaged and despeckled image at every temperature and create the petal plot waves, which		//
//		are again stored in their own folder.  Once these waves are generated at every temperature the program automatically makes a single polar plot with all the temperatures on it.			//
//		If this plot is ever closed then the user can recreate it with the "Create Polar Plot For All Tempereatures" button.																	//
//																																											//
//	7)	Finally the "Perform Angle Cuts" button takes cuts of the petal plot waves at each angle as a function of temperature.  Useful for examining the temperature dependence of the SHG		//
//		intensity at certain angles of a petal plot.																																//
//																																											//
//******************************************************************************************************************************************************************************************************************************//

//----You can use Control-2 to pull up the analysis palette----//
Menu "Macros"
	"Display Nick L Petal Plot Creator/2", NickLPetalPlot()
End

Function NickLPetalPlot()

	//---Save the current data folder, b/c we will be moving to the new data folder to hold the global variables and we will need to go back---//
	String dfSave = GetDataFolder(1)
	
	//Create data folder in Packages, isolates it from the user so don't get a bunch of variables clogging stuff up
	NewDataFolder/O/S root:Packages
	NewDataFolder/O/S root:Packages:NickLExtras
	
	//---Lets define some global variables---//
	
	//---Image_Name stores the name of the current Image---//
	String/G Image_Name = strVarOrDefault("root:Packages:NickLExtras:Sample_Name", "nan") 
	
	//---ImageSize is the number of pixels in the image, can be either 512 or 1024---//
	Variable/G ImageSize = NumVarOrDefault("root:Packages:NickLExtras:ImageSize", 0) 
	
	//---CenterX is the x coordinate of the center of the circles---//
	Variable/G CenterX = NumVarOrDefault("root:Packages:NickLExtras:CenterX", 0) 
	
	//---CenterY is the x coordinate of the center of the circles---//
	Variable/G CenterY = NumVarOrDefault("root:Packages:NickLExtras:CenterY", 0) 
	
	//---InnerR is the radius of the inner circle---//
	Variable/G InnerR = NumVarOrDefault("root:Packages:NickLExtras:InnerR", 0) 
	
	//---OuterR is the radius of the outer circle---//
	Variable/G OuterR = NumVarOrDefault("root:Packages:NickLExtras:OuterR", 0) 
	
	//---Image list is a string which holds the list of images in the current data folder---//
	String/G ImageList = strVarOrDefault("root:Packages:NickLExtras:ImageList", "")
	
	//--PPWaveList is a string which holds the list of Petal Plot Waves in the current data folder---//
	String/G PPWaveList = strVarOrDefault("root:Packages:NickLExtras:PPWaveList", "")
	
	//---PPWave_Name stores the name of the current Petal Plot Wave---//
	String/G PPWave_Name = strVarOrDefault("root:Packages:NickLExtras:PPWave_Name", "nan") 
	
	//---Num_Images is the # of images to combine for despeckling--//
	Variable/G Num_Images = NumVarOrDefault("root:Packages:NickLExtras:Num_Images", 0) 
	
	//---CaoVal Stores the cap value for despeckling image---//
	Variable/G CapVal = NumVarOrDefault("root:Packages:NickLExtras:CapVal", 0) 
	
	//---Set the initial values of our variables because Igor is dumb---//
	CenterX = 250; CenterY = 250; InnerR = 150; OuterR = 250; ImageList = ""; Num_Images = 2; ImageSize = 512; CapVal = 500
	
	//---We also need "Global Wave" that hold the inner, middle, and outer circle.  Let's also put them here and set their scale---//
	Make/O/N=(37,2) InnerCircle, OuterCircle, MidCircle
	SetScale /P x, 0, pi/18, InnerCircle, OuterCircle, MidCircle
	
	//---Go back to the original data folder---//
	SetDataFolder dfsave
	
	//---Brings window to front if open already, or opens if not---//
	DoWindow/HIDE=? $("NickL_Petal_Plot_Creator")
	if (V_flag != 0)
		DoWindow/F $("NickL_Petal_Plot_Creator");
	else
		Execute/Q/Z "NickL_PetalPlot_Palette()"
	endif
	
	//---Let's open the "Make Traces Different" Panel so it doesn't throw an error when we try to use it later---//
	CreateKBColorizePanel()
	
	//---Hide the window for it though, we don't need to see it to use it---//
	DoWindow/hide=1 KBColorizePanel
	
End

//---Generates the Petal Plot Palette---//
Window NickL_PetalPlot_Palette() : Panel
	PauseUpdate; Silent 1		// building window...
	NewPanel /W=(1212,80,1716,846)/N=NickL_Petal_Plot_Creator
	ModifyPanel frameStyle=2, fixedsize=1
	SetDrawLayer UserBack
	SetDrawEnv fsize= 16,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 266,731,"Use CTRL-2 To Open The Petal Plot Analysis Palette"
	SetDrawEnv fsize= 16,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 266,711,"Read Instructions In Code Before Using"
	SetDrawEnv fsize= 18,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 250,8,"Load and Display CCD Images:"
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 3,32,503,32
	SetDrawEnv linethick= 2,linefgc= (34048,768,512)
	DrawLine 0,757,500,757
	SetDrawEnv fsize= 18,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 250,153,"Despeckle CCD Images:"
	SetDrawEnv linethick= 2,linefgc= (27648,768,256)
	DrawLine 2,276,502,276
	SetDrawEnv fsize= 18,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 250,253,"Create Petal Plots:"
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 2,178,502,178
	SetDrawEnv linethick= 2,linefgc= (34048,768,512)
	DrawLine 0,701,500,701
	SetDrawEnv linethick= 2,linefgc= (27648,768,256)
	DrawLine 0,252,500,252
	SetDrawEnv linethick= 2,linefgc= (27648,768,256)
	DrawLine 0,151,500,151
	SetDrawEnv linethick= 2,linefgc= (27648,768,256)
	DrawLine 0,5,500,5
	SetDrawEnv linethick= 2,linefgc= (34048,768,512)
	DrawLine 0,537,506,537
	SetDrawEnv linethick= 2,linefgc= (34048,768,512)
	DrawLine 0,621,501,621
	PopupMenu popupImage,pos={10,50},size={300,21},bodyWidth=200,proc=PetalPlotPopMenuProc,title="\\Z16\\f01CCD Image:"
	PopupMenu popupImage,mode=3,popvalue="Select Image Here",value= #"root:Packages:NickLExtras:imageList"
	SetVariable setvarCenterX,pos={64,302},size={130,24},bodyWidth=50,proc=PetalPlotSetVarProc,title="\\Z16\\f01Center X:"
	SetVariable setvarCenterX,fSize=14,fStyle=1
	SetVariable setvarCenterX,value= root:Packages:NickLExtras:CenterX
	Slider CenterX,pos={214,287},size={250,55},proc=PetalPlotSliderProc,fSize=14
	Slider CenterX,fStyle=1
	Slider CenterX,limits={0,1024,1},variable= root:Packages:NickLExtras:CenterX,vert= 0,ticks= 5
	SetVariable setvarCenterY,pos={64,365},size={130,24},bodyWidth=50,proc=PetalPlotSetVarProc,title="\\f01\\Z16Center Y:"
	SetVariable setvarCenterY,fSize=14,fStyle=1
	SetVariable setvarCenterY,value= root:Packages:NickLExtras:CenterY
	Slider CenterY,pos={214,349},size={250,55},proc=PetalPlotSliderProc,fSize=14
	Slider CenterY,fStyle=1
	Slider CenterY,limits={0,1024,1},variable= root:Packages:NickLExtras:CenterY,vert= 0,ticks= 5
	SetVariable setvarInnerR,pos={31,427},size={162,24},bodyWidth=50,proc=PetalPlotSetVarProc,title="\\Z16\\f01Inner Radius:"
	SetVariable setvarInnerR,fSize=14,fStyle=1
	SetVariable setvarInnerR,limits={0,255,1},value= root:Packages:NickLExtras:InnerR
	Slider InnerR,pos={214,410},size={250,55},proc=PetalPlotSliderProc,fSize=14
	Slider InnerR,fStyle=1
	Slider InnerR,limits={0,520,1},variable= root:Packages:NickLExtras:InnerR,vert= 0,ticks= 5
	SetVariable setvarOuterR,pos={28,485},size={165,24},bodyWidth=50,proc=PetalPlotSetVarProc,title="\\f01\\Z16Outer Radius:"
	SetVariable setvarOuterR,fSize=14,fStyle=1
	SetVariable setvarOuterR,limits={0,255,1},value= root:Packages:NickLExtras:OuterR
	Slider OuterR,pos={214,470},size={250,55},proc=PetalPlotSliderProc,fSize=14
	Slider OuterR,fStyle=1
	Slider OuterR,limits={0,520,1},variable= root:Packages:NickLExtras:OuterR,vert= 0,ticks= 5
	Button DisplayImage,pos={173,84},size={160,60},proc=RunDisplayImage,title="Display Image"
	Button DisplayImage,fSize=16,fStyle=1
	Button CreatePetalPlot,pos={5,631},size={245,60},proc=RunCreatePetalWave,title="Create Petal Plot\rFrom Image"
	Button CreatePetalPlot,fSize=16,fStyle=1
	Button button0,pos={5,84},size={160,60},proc=RunLoadSHGImage,title="Load Image"
	Button button0,fSize=16,fStyle=1
	Button button1,pos={256,185},size={245,60},proc=RunDespeckleImage,title="Despeckle"
	Button button1,fSize=16,fStyle=1
	SetVariable NumImage,pos={30,187},size={194,24},title="Number Of Images:"
	SetVariable NumImage,fSize=16,fStyle=1
	SetVariable NumImage,value= root:Packages:NickLExtras:Num_Images
	Button button2,pos={340,83},size={160,60},proc=RunUpdateList,title="Update List"
	Button button2,fSize=16,fStyle=1
	PopupMenu popup0,pos={347,50},size={145,21},proc=ImageSize,title="Image Size:"
	PopupMenu popup0,fSize=16,fStyle=1,mode=1,popvalue="512",value= #"\"512;1024\""
	SetVariable CapValue,pos={72,217},size={152,24},title="Cap Value",fSize=16
	SetVariable CapValue,fStyle=1,value= root:Packages:NickLExtras:CapVal
	PopupMenu PPWaveListPopUp,pos={10,571},size={309,21},bodyWidth=175,proc=PetalPlotWavePopMenuProc,title="Petal Plot Wave:"
	PopupMenu PPWaveListPopUp,fSize=16,fStyle=1
	PopupMenu PPWaveListPopUp,mode=1,popvalue="Select Petal Plot Wave",value= #"root:Packages:NickLExtras:PPWaveList"
	Button button3,pos={340,550},size={160,60},proc=RunUpdatePPWaveList,title="Update List"
	Button button3,fSize=16,fStyle=1
	Button CreatePetalPlot1,pos={256,631},size={245,60},proc=RunCreatePetalPlot,title="Create Petal Plot\r From Wave"
	Button CreatePetalPlot1,fSize=16,fStyle=1
EndMacro

//---This function opens a dialog so that we can load an image and then creates an image plot of the data---//
Function LoadSHGImage()

	//---ImageSize is the number of pixels in the image---//
	NVAR ImageSize = root:Packages:NickLExtras:ImageSize
	
	//---Image_Name stores the name of the current Image---//
	SVAR Image_Name = root:Packages:NickLExtras:Image_Name
	
	//---ImageList is a list of the waves in the current folder---//
	SVAR ImageList = root:Packages:NickLExtras:ImageList

	//---Opens a dialog box and grabs the path for the file that's selected--///
	String Path
	GetFileFolderInfo/Q
	Path = S_Path
	
	//-----Make a string that just has the file name-----//
	Variable File_ending = strsearch(Path,":",Inf,1)
	Variable File_ending2 = strsearch(Path,".",Inf,1)
	String File = Path[(File_ending+1), (File_ending2-1)]
	
	//---Reports a problem if their is an error or if the user cancels the selection.  Aborts the code---//
	if (V_Flag == -1)
		print "User Cancelled Selection"
		abort
	endif
	
	if (V_Flag != 0 && V_Flag != -1)
		print "File Does Not Exist"
		abort
	endif	
	
	//---Load the Image file and then rename it appropriately---//
	LoadWave/Q/J/M/D/K=0/A/O Path
	
	//---Rename the image with the correct name from the file---//
	Wave Wave0
	Duplicate/O Wave0, $(FIle)
	Killwaves/Z Wave0
	
	//----Redimension the wave to ImageSize as defined in the front panel---//
	Wave Dummy = $(File)
	Redimension/N=(ImageSize,ImageSize) Dummy
	
	//---Set the global string Image_Name to be the file we just loaded---//
	Image_Name = File

End

//---This function creates an image plot of a loaded image and appends the inner, middle, and outer circles to the plot---//
Function DisplayImage(Image)
	Wave Image
	
	//---String to hold the name of the wave we are displaying---//
	String ImgName = NameOfWave(Image)
	
	//---Lets run image stats on the wave so we know how to set the scales later on when we make an image plot---//
	ImageStats Image
	
	//---Define our circle variables---//
	Wave InnerCircle = root:Packages:NickLExtras:InnerCircle
	Wave OuterCircle = root:Packages:NickLExtras:OuterCircle
	Wave MidCircle = root:Packages:NickLExtras:MidCircle

	//---Lets see if the graph exists yet.  If not then we'll create it.  If so then we'll kill it and recreate it with the appropriate wave attached---//
	DoWindow/HIDE=? $("CCDImage")
		
		if(V_flag==0)
		
			//---Now let's create the window so we have make the graph---//
			Display/W=(50,50,350,320)/N=$("CCDImage")
			
			//---Attach the wave to the image and then set the scales and style---//
			AppendImage/W=$("CCDImage") Image
			ModifyImage/W=$("CCDImage")  ''#0, ctab= {(V_avg - 2*V_adev), (V_avg + 2*V_adev), ColdWarm, 0}
			ModifyGraph/W=$("CCDImage") standoff=0
			ModifyGraph/W=$("CCDImage") fStyle=1,fSize=12,axThick=2
			
			//---Attach the inner, outer, and middle circle to the image and set the style---//
			AppendToGraph/W=$("CCDImage") innerCircle[][1] vs innerCircle[][0]
			AppendToGraph/W=$("CCDImage") outerCircle[][1] vs outerCircle[][0]
			AppendToGraph/W=$("CCDImage") midCircle[][1] vs midCircle[][0]
			ModifyGraph/W=$("CCDImage") rgb=(65535,65535,65535)
			ModifyGraph/W=$("CCDImage") lstyle(midCircle)=3, lsize=1.5
			ModifyGraph/W=$("CCDImage") width={Aspect,1}
			TextBox/C/N=text0/F=0/A=LT/B=1/X=2/Y=0 "\\f01\\Z12\\K(65535,65535,65535)" + ImgName
			
		elseif(V_flag==1)
		
			GetWindow/Z $("CCDImage") wsize
			
			//---Lets kill the window so we can recreate it, doesn't throw an error if the window doesn't exist yet---//
			DoWindow/K $("CCDImage")
			
			//---Now let's create the window so we have make the graph---//
			Display/W=(V_left,V_top,V_right,V_bottom)/N=$("CCDImage")
			
			//---Attach the wave to the image and then set the scales and style---//
			AppendImage/W=$("CCDImage") Image
			ModifyImage/W=$("CCDImage")  ''#0, ctab= {(V_avg - 2*V_adev), (V_avg + 2*V_adev), ColdWarm, 0}
			ModifyGraph/W=$("CCDImage") standoff=0
			ModifyGraph/W=$("CCDImage") fStyle=1,fSize=12,axThick=2
			
			//---Attach the inner, outer, and middle circle to the image and set the style---//
			AppendToGraph/W=$("CCDImage") innerCircle[][1] vs innerCircle[][0]
			AppendToGraph/W=$("CCDImage") outerCircle[][1] vs outerCircle[][0]
			AppendToGraph/W=$("CCDImage") midCircle[][1] vs midCircle[][0]
			ModifyGraph/W=$("CCDImage") rgb=(65535,65535,65535)
			ModifyGraph/W=$("CCDImage") lstyle(midCircle)=3, lsize=1.5
			ModifyGraph/W=$("CCDImage") width={Aspect,1}
			TextBox/C/N=text0/F=0/A=LT/B=1/X=2/Y=0 "\\f01\\Z12\\K(65535,65535,65535)" + ImgName
			
		elseif(V_flag==2)
		
			//---Lets kill the window so we can recreate it, doesn't throw an error if the window doesn't exist yet---//
			DoWindow/K $("CCDImage")
		
			//---Now let's create the window so we have make the graph---//
			Display/W=(50,50,350,320)/N=$("CCDImage")
			
			//---Attach the wave to the image and then set the scales and style---//
			AppendImage/W=$("CCDImage") Image
			ModifyImage/W=$("CCDImage")  ''#0, ctab= {(V_avg - 2*V_adev), (V_avg + 2*V_adev), ColdWarm, 0}
			ModifyGraph/W=$("CCDImage") standoff=0
			ModifyGraph/W=$("CCDImage") fStyle=1,fSize=12,axThick=2
			
			//---Attach the inner, outer, and middle circle to the image and set the style---//
			AppendToGraph/W=$("CCDImage") innerCircle[][1] vs innerCircle[][0]
			AppendToGraph/W=$("CCDImage") outerCircle[][1] vs outerCircle[][0]
			AppendToGraph/W=$("CCDImage") midCircle[][1] vs midCircle[][0]
			ModifyGraph/W=$("CCDImage") rgb=(65535,65535,65535)
			ModifyGraph/W=$("CCDImage") lstyle(midCircle)=3, lsize=1.5
			ModifyGraph/W=$("CCDImage") width={Aspect,1}
			TextBox/C/N=text0/F=0/A=LT/B=1/X=2/Y=0 "\\f01\\Z12\\K(65535,65535,65535)" + ImgName
			
		endif
			
End

//---This function updates the circles on the image plot so you can modify them in real time---//
Function PetalPlotUpdateRegion()
	
	//---CenterX is the x coordinate of the center of the circles---//
	NVAR CenterX = root:Packages:NickLExtras:CenterX
	
	//---CenterY is the y coordinate of the center of the circles---//
	NVAR CenterY = root:Packages:NickLExtras:CenterY
	
	//---InnerR is the radius of the inner circle---//
	NVAR InnerR = root:Packages:NickLExtras:InnerR
	
	//---OuterR is the radius of the outer circle---//
	NVAR OuterR = root:Packages:NickLExtras:OuterR
	
	//---Wave for the inner circle---//
	Wave InnerCircle = root:Packages:NickLExtras:InnerCircle
	
	//---Wave for the outer circle---//
	Wave OuterCircle = root:Packages:NickLExtras:OuterCircle
	
	//---Wave for the middle circle---//
	Wave MidCircle = root:Packages:NickLExtras:MidCircle
	
	//---Update the x and y components of the inner circle---//
	InnerCircle[][0] = InnerR*cos(x) + CenterX
	InnerCircle[][1] = InnerR*sin(x) + CenterY
	
	//---Update the x and y components of the outer circle---//
	OuterCircle[][0] = OuterR*cos(x) + CenterX
	OuterCircle[][1] = OuterR*sin(x) + CenterY
	
	//---Update the x and y components of the middle circle---//
	MidCircle[][0] = (InnerR + OuterR)/2*cos(x) + CenterX
	MidCircle[][1] = (InnerR + OuterR)/2*sin(x) + CenterY
	
End

//---This function averages and despeckles images into a single image---//
Function DespeckleImage(Image, NumImage, Cap)
	Wave Image
	Variable NumImage, Cap
	
	//---ImageList is a list of the waves in the current folder---//
	SVAR ImageList = root:Packages:NickLExtras:ImageList
	
	//---Image_Name stores the name of the current Image---//
	SVAR Image_Name = root:Packages:NickLExtras:Image_Name
	
	//---The string ImgName holds the full name of the wave we are despeckling---//
	String FullImgName = NameOfWave(Image)

	//--Define some variables---//
	Variable Val, i, j, k,  Nx = DimSize(Image, 0), Ny = DimSize(Image, 1)
	
	//---Lets run Image States on a small portion of the image so we know what the "background" average is---//
	ImageStats/GS={0, 50, 0, 50} Image
	Variable AvgCount = V_Avg
	
	//---Lets grab the base name of the image---//
	Variable File_Ending = strsearch(FullImgName,"_",Inf,1)
	String ImgName = FullImgName[(0), (File_ending-1)]

	//---We need to create an image to hold the despeckled image, call it the same name but with "_Avg" on the end---//
	Duplicate/O Image, $(ImgName) + "_Avg" 
	Wave Dummy = $(ImgName) + "_Avg" 
	
	//---Initialize it to zero at the start of the despeckling---//
	Dummy = 0
	
	//---Now the for loops which run over the rows, columns, and waves---//
	for(i = 0; i < Nx; i += 1)
		for(j = 0; j < Ny; j += 1)
		
			//---Reset Val before we redo the averaging each time---//
			Val = 0
			
			for(k = 1; k <= NumImage; k +=1)
			
					Wave Dummy2 = $(ImgName) + "_" + num2str(k)
			
					if(Dummy2[i][j] < Cap)
						Dummy[i][j] += Dummy2[i][j]
						Val += 1
					else
						Dummy[i][j] += 0
					endif
			endfor
					
					if(Val >= 1)
						Dummy[i][j] /= Val
					else
						Dummy[i][j] = AvgCount
					endif
		endfor
	endfor
	
	//---Reset Image_Name to the despeckled wave---//
	Image_Name = ImgName + "_Avg" 
	
	//---Do some wave clean up---//
	KillVariables/Z Num_Images, CapVal
End

//--This function radially integrates the image between the inner and outer circles and generates a wave for the petal plots---//
Function CreatePetalWave(Image)
	
	//---Image we want make a petal plot from---//
	Wave Image 
	
	//--ImgName holds the name of the wave we are integrating---//
	String ImgName = NameOfWave(Image)
	
	//---Image_Name stores the name of the current Image---//
	SVAR Image_Name = root:Packages:NickLExtras:Image_Name
	
	//---CenterX is the x coordinate of the center of the circles---//
	NVAR CenterX = root:Packages:NickLExtras:CenterX
	
	//---CenterY is the y coordinate of the center of the circles---//
	NVAR CenterY = root:Packages:NickLExtras:CenterY
	
	//---InnerR is the radius of the inner circle---//
	NVAR InnerR = root:Packages:NickLExtras:InnerR
	
	//---OuterR is the radius of the outer circle---//
	NVAR OuterR = root:Packages:NickLExtras:OuterR
	
	//---Wave for the inner circle---//
	Wave InnerCircle = root:Packages:NickLExtras:InnerCircle
	
	//---Wave for the outer circle---//
	Wave OuterCircle = root:Packages:NickLExtras:OuterCircle
	
	//---Wave for the middle circle---//
	Wave MidCircle = root:Packages:NickLExtras:MidCircle
	
	//---Define our variables, NTheta is the number of points we want from the integration Nx and Ny are the number of rows and columns in our image---//
	Variable NTheta = 60,  Nx = DimSize(Image, 0), Ny = DimSize(Image, 1), i, j, Background = 0, BackgroundNorm = 0 
	
	//---Make waves with NTheta number of points to hold the results after integration and then sets the scale accordingly---//
	Make/O/N=(NTheta) PetalPlotR, PetalPlotNorm, PetalPlotX, PetalPlotY
	Wave PetalPlotR, PetalPlotNorm, PetalPlotX, PetalPlotY
	
	//---set the scale of the waves in radians so that the trig function of Igor don't give us problems---//
	SetScale /P x, 0, 2*pi/Ntheta, PetalPlotR, PetalPlotNorm, PetalPlotX, PetalPlotY
	
	//---Initialize the waves to zero---//
	PetalPlotR = 0
	PetalPlotNorm = 0
	
	//---Two loops to run over the rows and columns of the image respectively---//
	for(i = 0; i < Nx; i += 1)
		for(j = 0; j < Ny; j += 1)
	
			//---Define the r and theta values as we run over the rows and columns---//
			Variable r = sqrt((i - CenterX)^2 + (j - CenterY)^2)
			Variable Theta = atan2(j - CenterY, i - CenterX)
			
			//---Not entirely sure what this line does but I think it prevents complications from atan2 for angles separated by 180?---//
			Variable ThetaPnt = mod(round(Theta/DimDelta(PetalPlotR, 0)) + NTheta, NTheta)
			
			//---If we're outside the integration area then add the current value of the image to the background terms---//
			if(r > OuterR)
				Background += Image[i][j]
				BackgroundNorm += 1
			//---If we're inside the integration area then add the current value of the image to the Petal Plot waves---//
			elseif(r >= InnerR)
				PetalPlotR[ThetaPnt] += Image[i][j]
				PetalPlotNorm[ThetaPnt] += 1
			endif

		endfor
	endfor
	
	//---Normalize the backgrounds---//
	PetalPlotR /= PetalPlotNorm
	Background /= BackgroundNorm
	
	//---Subtract the background from the Petal Plot data---//
	PetalPlotR -= Background
	
	//---Now set the values of PetalPlotX and PetalPlotY from PetalPlotR---//
	PetalPlotX = PetalPlotR[p]*cos(x)
	PetalPlotY = PetalPlotR[p]*sin(x)
	
	//---Lets rename the x and y components of the petal plot in accordance with the sample---//
	Duplicate/O PetalPlotX, $(ImgName) + "_PPX"
	Duplicate/O PetalPlotY, $(ImgName) + "_PPY"
	Duplicate/O PetalPlotR, $(ImgName) + "_R"
	
	//---Get rid of the waves we don't need anymore---//
	KillWaves/Z PetalPlotNorm, PetalPlotR, PetalPlotX, PetalPlotY, $(ImgName) + "_PPY", $(ImgName) + "_PPX"
	
	//---Lets rescale all the waves so that they're in degrees now---//
	SetScale /P x, 0, 360/Ntheta, $(ImgName + "_R")
	
End

//---This function makes the nice petal plots using the polar plots package in Igor---//
Function MakePetalPlot(Image)
	//---Image we want make a petal plot from---//
	Wave Image 
	
	//---Image_Name stores the name of the current Image---//
	SVAR Image_Name = root:Packages:NickLExtras:Image_Name
	
	//---We want this function to work whether we give it the name of an image or the name of a petal plot wave that we have already created--//
	//--So we're going to check to see if the wave Image is a 1D or 2D wave and then set the string ImgName accordingly---//
	if(WaveDims(Image)==1)
	
		//---ImgName is a string that holds the name of the image we want to make a petal plot of---//
		String ImgName = NameOfWave(Image)
	
	elseif(WaveDims(Image)==2)
		
		ImgName = NameOfWave(Image) + "_R"
		
	endif
	
	//---This code makes a nice polar plot of the ImgName_R wave---// 
	//---Lets see if the petal plot exists yet.  If not then we'll create it.  If so then we'll kill it and recreate it with the appropriate wave attached---//
	DoWindow/HIDE=? $(ImgName + "PolarPlot")
	
		if(V_flag==0)
	
			WMNewPolarGraph("", ImgName + "PolarPlot")
			WMPolarAppendTrace(ImgName + "PolarPlot", $(ImgName), $"", 360)
			WMPolarGraphSetVar(ImgName + "PolarPlot","RadiusAxisThick",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","AngleAxisThick",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MajorGridLineSize",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MinorGridLineSize",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MajorTickThick",5)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MinorTickThick",5)
			WMPolarGraphSetVar(ImgName + "PolarPlot","TickLabelFontSize",14)
			ModifyGraph mode(polarY0)=4,marker(polarY0)=8,msize(polarY0)=4;DelayUpdate
			ModifyGraph mrkThick(polarY0)=2,lstyle(polarY0)=3, lsize(polarY0)=2
			ModifyGraph width=360,height=360
			Legend/C/N=text0/J/F=0/H=20/A=MC "\\f01\\Z14\\s(polarY0)" + ImgName
			Legend/C/N=text0/J/X=30.00/Y=48.33
			
		elseif(V_flag==1)
		
			GetWindow/Z $(ImgName + "PolarPlot") wsize
			
			//---Now we can make the Petal Plot---//
			DoWindow/K $(ImgName + "PolarPlot")
			
			//---Now let's create the window so we have make the graph---//
			Display/W=(V_left,V_top,V_right,V_bottom)/N=$(ImgName + "PolarPlot")
			
			WMNewPolarGraph("", ImgName + "PolarPlot")
			WMPolarAppendTrace(ImgName + "PolarPlot", $(ImgName), $"", 360)
			WMPolarGraphSetVar(ImgName + "PolarPlot","RadiusAxisThick",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","AngleAxisThick",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MajorGridLineSize",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MinorGridLineSize",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MajorTickThick",5)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MinorTickThick",5)
			WMPolarGraphSetVar(ImgName + "PolarPlot","TickLabelFontSize",14)
			ModifyGraph mode(polarY0)=4,marker(polarY0)=8,msize(polarY0)=4;DelayUpdate
			ModifyGraph mrkThick(polarY0)=2,lstyle(polarY0)=3, lsize(polarY0)=2
			ModifyGraph width=360,height=360
			Legend/C/N=text0/J/F=0/H=20/A=MC "\\f01\\Z14\\s(polarY0)" + ImgName
			Legend/C/N=text0/J/X=30.00/Y=48.33
			
		elseif(V_flag==2)
			
			//---Now we can make the Petal Plot---//
			DoWindow/K $(ImgName + "PolarPlot")
			
			//---Now let's create the window so we have make the graph---//
			Display/W=(50,50,350,320)/N=$(ImgName + "PolarPlot")
				
			WMNewPolarGraph("", ImgName + "PolarPlot")
			WMPolarAppendTrace(ImgName + "PolarPlot", $(ImgName), $"", 360)
			WMPolarGraphSetVar(ImgName + "PolarPlot","RadiusAxisThick",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","AngleAxisThick",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MajorGridLineSize",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MinorGridLineSize",2)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MajorTickThick",5)
			WMPolarGraphSetVar(ImgName + "PolarPlot","MinorTickThick",5)
			WMPolarGraphSetVar(ImgName + "PolarPlot","TickLabelFontSize",14)
			ModifyGraph mode(polarY0)=4,marker(polarY0)=8,msize(polarY0)=4;DelayUpdate
			ModifyGraph mrkThick(polarY0)=2,lstyle(polarY0)=3, lsize(polarY0)=2
			ModifyGraph width=360,height=360
			Legend/C/N=text0/J/F=0/H=20/A=MC "\\f01\\Z14\\s(polarY0)" + ImgName
			Legend/C/N=text0/J/X=30.00/Y=48.33

		endif
End

//-----------------------------------------------------------------------------------------------------BUTTON CONTROLS-----------------------------------------------------------------------------------------------------//

//---This is the procedure for the "CCD Image" Drop Down Menu---//
Function PetalPlotPopMenuProc(pa) : PopupMenuControl
	STRUCT WMPopupAction &pa
	
	switch(pa.eventCode)
		case 2: // mouse up
			SVAR Image_Name = root:Packages:NickLExtras:Image_Name
			
			//---Set Image_Name to the wave selected in the drop down menu---//
			Image_Name = pa.popStr
			break
	endswitch
	return 0
End

//---This is the procedure for the "Image Size" Drop Down Menu---//
Function ImageSize(pa) : PopupMenuControl
	STRUCT WMPopupAction &pa
	
	switch(pa.eventCode)
		case 2: // mouse up
			NVAR ImageSize = root:Packages:NickLExtras:ImageSize
			
			//---Set the value of ImageSize to be what is selected in the drop down menu---//
			ImageSize = Str2num(pa.popStr)
			break
	endswitch
	return 0
End

//---This is the procedure for the "Load CCD Image" button---//
Function RunLoadSHGImage(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			
			//---Run the load images function--//
			LoadSHGImage()
			
			//---Declare some global variables---//
			SVAR Image_Name = root:Packages:NickLExtras:Image_Name
			SVAR ImageList = root:Packages:NickLExtras:ImageList
			
			//---Now lets kill the popupimage menu and recreate it with Image_Name selected so that our life is easy---//
			KillControl/W='NickL_Petal_Plot_Creator' PopUpImage
			ImageList = WaveList("*", ";", "TEXT:0,DIMS:2")
			PopupMenu/Z popupImage, win=NickL_Petal_Plot_Creator, pos={5,50},size={300,21},bodyWidth=200,proc=PetalPlotPopMenuProc,title="\\Z16\\f01CCD Image:"
			PopupMenu/Z popupImage,win=NickL_Petal_Plot_Creator, mode=3,popvalue=Image_Name,value= #"root:Packages:NickLExtras:imageList"
			
			//---Make an image plot of the data for us to see, also adds the inner, middle, and outer circles---//
			DisplayImage($(Image_Name))
			PetalPlotUpdateRegion()
		
	endswitch
	return 0
End

//---This is the procedure for the "Display Image" button---//
Function RunDisplayImage(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		
			SVAR Image_Name = root:Packages:NickLExtras:Image_Name
			SVAR ImageList = root:Packages:NickLExtras:ImageList
			
			DisplayImage($(Image_Name))
			ImageList = WaveList("*", ";", "TEXT:0,DIMS:2")
			
	endswitch
	return 0
End

//---This is the procedure for the "Update List" button---//
Function RunUpdateList(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		
			SVAR ImageList = root:Packages:NickLExtras:ImageList
			ImageList = WaveList("*", ";", "TEXT:0,DIMS:2")
			
	endswitch
	return 0
End

//---This is the procedure for the "Despeckle" button---//
Function RunDespeckleImage(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			
			//---Declare some global strings and variables---//
			SVAR Image_Name = root:Packages:NickLExtras:Image_Name
			SVAR ImageList = root:Packages:NickLExtras:ImageList
			Variable/G Num_Images = NumVarOrDefault("root:Packages:NickLExtras:Num_Images", 0) 
			Variable/G CapVal = NumVarOrDefault("root:Packages:NickLExtras:CapVal", 0) 
			
			//---Despeckle the images using our despeckle function---//
			DespeckleImage($(Image_Name), (Num_Images), (CapVal))
			DisplayImage($(Image_Name))
			
			//---Now lets kill the popupimage menu and recreate it with Image_Name selected so that our life is easy---//
			KillControl/W='NickL_Petal_Plot_Creator' PopUpImage
			ImageList = WaveList("*", ";", "TEXT:0,DIMS:2")
			PopupMenu/Z popupImage, win=NickL_Petal_Plot_Creator, pos={5,50},size={300,21},bodyWidth=200,proc=PetalPlotPopMenuProc,title="\\Z16\\f01CCD Image:"
			PopupMenu/Z popupImage,win=NickL_Petal_Plot_Creator, mode=3,popvalue=Image_Name,value= #"root:Packages:NickLExtras:imageList"
			
	endswitch
	return 0
End

//---This is the procedure that updates the sliders in real time---//
Function PetalPlotSetVarProc(sva) : SetVariableControl
	STRUCT WMSetVariableAction &sva
	
	switch(sva.eventCode)
		case 1: // mouse up
		case 2: // enter key
		case 3: // live update
		
			PetalPlotUpdateRegion()
			
			break
	endswitch
	return 0
End

//---This is the procedure that updates the sliders in real time---//
Function PetalPlotSliderProc(ctrlName,sliderValue,event) : SliderControl

	String ctrlName
	Variable sliderValue
	Variable event
	
	if((event & 2^0) != 0)
		PetalPlotUpdateRegion()
	endif
	return 0
End

//---This is the procedure for the "Create Petal Plot" button---//
Function RunCreatePetalWave(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			
			//---Declare our global variables---//
			SVAR Image_Name = root:Packages:NickLExtras:Image_Name
			
			//---Create a petal wave from the Image plot---//
			CreatePetalWave($(Image_Name))
			
			//---Then make a nice petal plot from the petal wave data---//
			MakePetalPlot($(Image_Name))
			
	endswitch
	return 0
End

//---This is the procedure for the "Petal Plot Wave" Drop Down Menu---//
Function PetalPlotWavePopMenuProc(pa) : PopupMenuControl
	STRUCT WMPopupAction &pa
	
	switch(pa.eventCode)
		case 2: // mouse up
			SVAR PPWave_Name = root:Packages:NickLExtras:PPWave_Name
			
			//---Set Image_Name to the wave selected in the drop down menu---//
			PPWave_Name = pa.popStr
			break
	endswitch
	return 0
End

//---This is the procedure for the "Update List" button---//
Function RunUpdatePPWaveList(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		
			SVAR PPWaveList = root:Packages:NickLExtras:PPWaveList
			PPWaveList = WaveList("*_R", ";", "TEXT:0,DIMS:1")
			
	endswitch
	return 0
End

//-----------------------------------------------------------------------FUNCTIONS FOR ANALYZING TEMPERATURE DEPENDENCE-----------------------------------------------------------------------//

//----You can use Control-3 to pull up the temperature dependent analysis palette----//
Menu "Macros"
	"Display Nick L Temp Dependent Petal Plot Creator/3", NickLTDependPetalPlot()
End

Function NickLTDependPetalPlot()

	//---Save the current data folder, b/c we will be moving to the new data folder to hold the global variables and we will need to go back---//
	String dfSave = GetDataFolder(1)
	
	//---Go to the NickLExtras Folder---//
	SetDataFolder root:Packages:NickLExtras
	
	//---Lets define some global variables---//
	
	//---Folder where data will be loaded from.  It gets generated by the "Load Image" button in the analysis palette---//
	String/G Base_Folder
	
	//---String at the beginning of each wave name---//
	String/G Base_FileName
	
	//---Go back to the original data folder---//
	SetDataFolder dfsave
	
	//---Brings window to front if open already, or opens if not---//
	DoWindow/HIDE=? $("NickL_TDepend_SHG_Analysis")
	if (V_flag != 0)
		DoWindow/F $("NickL_TDepend_SHG_Analysis");
	else
		Execute/Q/Z "NickL_TDepend_PetalPlot_Palette()"
	endif
	
End

//---Generates the Petal Plot Palette---//
Window NickL_TDepend_PetalPlot_Palette() : Panel
	PauseUpdate; Silent 1		// building window...
	NewPanel/W=(910,81,1260,571)/N=NickL_TDepend_SHG_Analysis
	ModifyPanel frameStyle=2, fixedsize=1
	SetDrawLayer UserBack
	SetDrawEnv fsize= 16,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 175,446,"Use CTRL-3 To Open The Temperature"
	SetDrawEnv fsize= 16,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 175,419,"Read Instructions In Code Before Using"
	SetDrawEnv fsize= 18,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 175,9,"Load and Despeckle CCD Images:"
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,36,350,36
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,413,350,413
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,484,350,484
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,5,350,5
	SetDrawEnv fsize= 16,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 175,463,"Dependent SHG Analysis Palette"
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,198,350,198
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,306,350,306
	SetDrawEnv fsize= 18,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 175,204,"Create Petal Waves and Plots:"
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,231,350,231
	SetDrawEnv fsize= 18,fstyle= 1,textrgb= (27648,768,256),textxjust= 1,textyjust= 2
	DrawText 175,313,"Perform Angle Cuts Of Petal Waves:"
	SetDrawEnv linethick= 2,linefgc= (34048,768,256)
	DrawLine 0,340,350,340
	Button button0,pos={5,132},size={170,60},proc=RunGetFolder,title="Get Data Folder"
	Button button0,fSize=16,fStyle=1
	SetVariable FileNameSetVar,pos={10,43},size={335,24},title="File Name Base String:"
	SetVariable FileNameSetVar,fSize=16,fStyle=1
	SetVariable FileNameSetVar,value= root:Packages:NickLExtras:Base_FileName
	Button button1,pos={177,132},size={170,60},proc=RunLoadandDespeckleImages,title="Load and Despeckle\rImages"
	Button button1,fSize=16,fStyle=1
	SetVariable NumImagesSetVar,pos={10,73},size={337,24},title="Number Of Images Per Temperature:"
	SetVariable NumImagesSetVar,fSize=16,fStyle=1
	SetVariable NumImagesSetVar,value= root:Packages:NickLExtras:Num_Images
	Button button2,pos={5,236},size={170,60},proc=RunTDependMakePolarPlotWaves,title="Create Petal\r Plot Waves"
	Button button2,fSize=16,fStyle=1
	Button button3,pos={53,348},size={245,60},proc=RunPerformAngleCuts,title="Perform Angle Cuts"
	Button button3,fSize=16,fStyle=1
	Button button4,pos={177,236},size={170,60},proc=RunTDependPolarPlot,title="Create Polar Plot\rFor All Temps"
	Button button4,fSize=16,fStyle=1
	CheckBox SmoothCheckBox,pos={97,101},size={154,20},title="Smooth Images?"
	CheckBox SmoothCheckBox,fSize=16,fStyle=1,value= 1
EndMacro

//---This function grabs the folder information where all our temperature dependent data is stored.  The user can select any file from the folder---//
Function GetFolder()

	//---Base_Folder is the folder we are going to load data from.  Mostly used for temperature dependence later---//
	SVAR Base_Folder = root:Packages:NickLExtras:Base_Folder

	//---Grabs the file path for the file that was selected---///
	String Path
	GetFileFolderInfo/Q
	Path = S_Path

	//-----Make a string that just has the folder name-----//
	variable Folder_Ending = strsearch(Path,":",Inf,1)
	String Folder = Path[0,Folder_Ending]
	
	//-----Folder where data is loaded from-----//
	Base_folder = Folder
	
	//---Reports a problem if their is an error or if the user cancels the selection.  Aborts the code---//
	if (V_Flag == -1)
		print "User Cancelled Selection"
		abort
	endif
	
	if (V_Flag != 0 && V_Flag != -1)
		print "File Does Not Exist"
		abort
	endif	

End

Function LoadandDespeckleImages()
	
	//---ImageSize is the number of pixels in the image---//
	NVAR ImageSize = root:Packages:NickLExtras:ImageSize
	
	//---Image_Name stores the name of the current Image---//
	SVAR Image_Name = root:Packages:NickLExtras:Image_Name
	
	//---Base_Folder is the folder we are going to load data from---//
	SVAR Base_Folder = root:Packages:NickLExtras:Base_Folder
	
	//---Base_FileName is the string which begins each file name we want to load---//
	SVAR Base_FileName = root:Packages:NickLExtras:Base_FileName
	
	//---CapVal is our cap for despeckling Images---//
	Variable/G CapVal = NumVarOrDefault("root:Packages:NickLExtras:CapVal", 0) 
	
	//---Num_Images is the number of images at each temperature, for now assumed to be the same at every temperature---//
	Variable/G Num_Images = NumVarOrDefault("root:Packages:NickLExtras:Num_Images", 0) 
	
	//---Go to root and grab our text wave that holds our temperatures---//
	SetDataFolder root:
	Wave/T Temps
	Variable NumTemps = Numpnts(Temps), i, j
	
	//---BaseName is what we will call the main folder for our analysis---//
	String BaseName = Base_FileName + "_Analysis"
	
	//---Lets create the folders where we will store all our data---//
	NewDataFolder/O root:$(BaseName)
	NewDataFolder/O root:$(BaseName):'Raw Images'
	NewDataFolder/O root:$(BaseName):'Despeckled Images'
	
	//---Duplicate Temps to the analysis folder---//
	Duplicate/O Temps, root:$(BaseName):Temps
	//KillWaves/Z root:Temps
	
	//---Go to the main data folder---//
	SetDataFolder root:$(BaseName):
	Wave/T Temps
	
	//---This loops runs over all the temperatures---//	
	for(i=0; i<NumTemps; i+=1)
			//---Prints the temperature so we know 
			Print Temps[i]
			
			//---Go to the main data folder---//
			SetDataFolder root:$(BaseName):
			
			//---The loop variable j runs over the number of images at each temperature---//
			for(j=1; j<=Num_Images; j+=1)
				
				//---String for the file name we are going to load---//
				String FileBase_Folder = Base_Folder + Base_FileName + "_" + Temps[i] + "_" + num2str(j) + ".txt"
				
				//---String for the name we want to give the file---//
				String FileName = Base_FileName + "_" + Temps[i] + "_" + num2str(j)
	
				//---Load the Image file and then rename it appropriately---//
				LoadWave/J/M/D/K=0/A/O FileBase_Folder
				Wave Wave0
				Duplicate/O Wave0, $(FileName)
			
				//---Kill the Dummy Waves that Igor creates---//
				KillWaves/Z root:$(BaseName):Wave0
			
				//---Redimension the waves accoring to ImageSize
				Wave Dummy = $(FileName)
				Redimension/N=(ImageSize,ImageSize) Dummy
				
			endfor
			
			//---Despeckle the Images---//
			DespeckleImage($(FileName), Num_Images, CapVal)
			
			//---String for the despeckeled image name---//
			String AvgImg = Base_FileName + "_" + Temps[i] + "_Avg"
			
			//---A loop for sorting waves and cleaning up a bit---//
			for(j=1; j<=Num_Images; j+=1)
			
				FileName = Base_FileName + "_" + Temps[i] + "_" + num2str(j)
				
				//---Duplicate the raw images into their appropriate folders---//
				Duplicate/O $(FileName), root:$(BaseName):'Raw Images':$(FileName)
				
				//---Kill the waves in the main folder now---//
				KillWaves/Z  root:$(BaseName):$(FileName)
				
			endfor
			
			//---Duplicate the averaged image into its appropriate folder and kill it in the main folder---//
			Duplicate/O $(AvgImg), root:$(BaseName):'Despeckled Images':$(AvgImg)
			KillWaves/Z  root:$(BaseName):$(AvgImg)
			
			//---Go to the folder with the average images---//
			SetDataFolder root:$(BaseName):'Despeckled Images'
			
			//---Smooth the despeckled images only if the check box on the front panel is enabled---//
			ControlInfo SmoothCheckBox
			if (V_Value == 1)
								
				//---This smooth's the rows and columns of the Despeckled Images for better signal to noise---//
				Smooth 1, $(AvgImg)
				Smooth/DIM=1 1, $(AvgImg)
				
			endif
		
		endfor
End

Function TDependMakePolarPlotWaves()
	
	//---Base_Folder is the folder we are going to load data from---//
	SVAR Base_Folder = root:Packages:NickLExtras:Base_Folder
	
	//---Base_FileName is the string which begins each file name we want to load---//
	SVAR Base_FileName = root:Packages:NickLExtras:Base_FileName
	
	//---BaseName is what we will call the main folder for our analysis---//
	String BaseName = Base_FileName + "_Analysis"
	
	//---Go to root and grab our text wave that holds our temperatures---//
	SetDataFolder root:$(BaseName):
	Wave/T Temps
	Variable NumTemps = Numpnts(Temps), i, j
	
	//---Lets create the folders where we will store all our data---//
	NewDataFolder/O root:$(BaseName):'Petal Plots'
	
	//---Go to the despeckled images folder---//
	SetDataFolder root:$(BaseName):'Despeckled Images'
	
		for(i=0; i<NumTemps; i+=1)

			String AvgImg = Base_FileName + "_" + Temps[i] + "_Avg"
			
			//---Intergrate the Images to make a petal plot wave---//
			CreatePetalWave($(AvgImg))
			
			String PetalName = Base_FileName + "_" + Temps[i] + "_Avg_R"
			String PetalName2 = Base_FileName + "_" +  Temps[i] + "_R"
			
			//---Rename the Petal Plot Waves accordingly---//
			Duplicate/O $(PetalName), root:$(BaseName):'Petal Plots':$(PetalName2)
			
			//---Now kill them in the main folder---//
			KillWaves/Z root:$(BaseName):'Despeckled Images':$(PetalName)
	endfor
	
End

Function PerformAngleCuts()
	
	//---Base_Folder is the folder we are going to load data from---//
	SVAR Base_Folder = root:Packages:NickLExtras:Base_Folder
	
	//---Base_FileName is the string which begins each file name we want to load---//
	SVAR Base_FileName = root:Packages:NickLExtras:Base_FileName
	
	//---BaseName is what we will call the main folder for our analysis---//
	String BaseName = Base_FileName + "_Analysis"
	
	//---Go to root and grab our text wave that holds our temperatures---//
	SetDataFolder root:$(BaseName):
	Wave/T Temps
	Variable NumTemps = Numpnts(Temps), i, j
	
	//---Lets create the folders where we will store all our data---//
	NewDataFolder/O root:$(BaseName):'Angle Cuts'
		
	//---Now that we have generated the waves for the petal plots lets take cuts of them at certain angles---//		
	SetDataFolder root:$(BaseName):'Petal Plots'
	
	//---Generic name for a petal plot wave---//
	Wave DummyPetal = $(Base_FileName + "_" + Temps[0] + "_R")
	
	//---Lets find out how many points are in the wave---//
	Variable NumAngles = numpnts(DummyPetal)
	
	//---Angle step is the angle different between two points---//
	Variable AngleStep = 360 / NumAngles
	
	//---Loop which runs over 360 degrees in increments of 2*AngleStep for now---//
	for(i=0; i<NumAngles; i+=2)
	
		//---This holds the current angle in the loop---//
		Variable Angle = i*AngleStep
		
		//---Lets make a string for the angle wave we are creating and then create it---//
		String AngleWave = "AngleCut_pin_" + num2str(Angle) + "Deg"
		Make/O/N=(NumTemps) $(AngleWave)
		Wave AngleDummy = $(AngleWave)
	
		//----This loops runs over the temperatures and populates the angle wave we just made---//
		for(j=0; j<NumTemps; j+=1)
			
			Wave DummyPetalPlot = $(Base_FileName + "_" + Temps[j] + "_R")
			AngleDummy[j] = DummyPetalPlot[i]
		
		endfor
		
		//----Move the angle wave to the correct folder and kill it in the petal plots folder---//
		Duplicate/O $(AngleWave), root:$(BaseName):'Angle Cuts':$(AngleWave)
		KillWaves/Z root:$(BaseName):'Petal Plots':$(AngleWave)
		
	endfor
	
	//---Go to the angle cuts folder and create a numeric wave of the temperatures---//
	SetDataFolder root:$(BaseName):'Angle Cuts'
	Make/O/N=(NumTemps) Temperatures
	
	for(i=0; i<NumTemps; i+=1)
		Temperatures[i] = str2num(Temps[i])
	endfor

End

//---This function creates a pingle polar plot and attaches all the data to it---//
Function TDependPolarPlot()

	//---ImageSize is the number of pixels in the image---//
	NVAR ImageSize = root:Packages:NickLExtras:ImageSize
	
	//---Base_Folder is the folder we are going to load data from---//
	SVAR Base_Folder = root:Packages:NickLExtras:Base_Folder
	
	//---Base_FileName is the string which begins each file name we want to load---//
	SVAR Base_FileName = root:Packages:NickLExtras:Base_FileName
	
	//---BaseName is what we will call the main folder for our analysis---//
	String BaseName = Base_FileName + "_Analysis"
	
	//---Go to root and grab our text wave that holds our temperatures---//
	SetDataFolder root:$(BaseName):
	Wave/T Temps
	Variable NumTemps = Numpnts(Temps), i, j
	
	//---String which holds the name of the petal plot---//
	String PetalName = Base_FileName + "_PolarPlot"
	
	//---Go to the petal plots folder---//
	SetDataFolder root:$(BaseName):'Petal Plots'
	
	//---This code makes a nice polar plot of the Image_Name_R wave---// 
	//---Lets see if the petal plot exists yet.  If not then we'll create it.  If so then we'll kill it and recreate it with the appropriate wave attached---//
		DoWindow/HIDE=? $(PetalName)
	
		if(V_flag==0)
	
			WMNewPolarGraph("", PetalName)
			WMPolarGraphSetVar(PetalName,"RadiusAxisThick",2)
			WMPolarGraphSetVar(PetalName,"AngleAxisThick",2)
			WMPolarGraphSetVar(PetalName,"MajorGridLineSize",2)
			WMPolarGraphSetVar(PetalName,"MinorGridLineSize",2)
			WMPolarGraphSetVar(PetalName,"MajorTickThick",5)
			WMPolarGraphSetVar(PetalName,"MinorTickThick",5)
			WMPolarGraphSetVar(PetalName,"TickLabelFontSize",14)
						
			for(i=0; i<NumTemps; i+=1)
			
				String PetalName2 = Base_FileName + "_" + Temps[i] + "_R"
				WMPolarAppendTrace(PetalName, $(PetalName2), $"", 360)
				ModifyGraph mode($("PolarY" + num2str(i)))=4,marker($("PolarY" + num2str(i)))=8,msize($("PolarY" + num2str(i)))=4;DelayUpdate
				ModifyGraph mrkThick($("PolarY" + num2str(i)))=2,lstyle($("PolarY" + num2str(i)))=3, lsize($("PolarY" + num2str(i)))=2
			
			endfor
			
				ModifyGraph width=360,height=360
				ModifyGraph margin(top)=72
				ColorScale/C/N=text0  ctab={str2num(Temps[0]),str2num(Temps[NumTemps-1]),ColdWarm,0},fsize=14,fstyle=1,minor=1;DelayUpdate
				ColorScale/C/N=text0 widthPct=50,height=10
				ColorScale/C/N=text0/X=3.10/Y=60.21
				ColorScale/C/N=text0/F=0/B=1/H=20/A=MC vert=0,widthPct=50,heightPct=5;
				ColorScale/C/N=text0/F=0 vert=0
				ColorScale/C/N=text0 "\\f01\\Z14Temperature (K)"
				TextBox/C/N=text1/F=0/A=MB/X=0/Y=-5 "\\f01\\Z14" + Base_FileName
				
		elseif(V_flag==1)
		
			GetWindow/Z $(PetalName) wsize
			
			//---Now we can make the Petal Plot---//
			DoWindow/K $(PetalName)
			
			//---Now let's create the window so we have make the graph---//
			Display/W=(V_left,V_top,V_right,V_bottom)/N=$(PetalName)
			
			WMNewPolarGraph("", PetalName)
			WMPolarGraphSetVar(PetalName,"RadiusAxisThick",2)
			WMPolarGraphSetVar(PetalName,"AngleAxisThick",2)
			WMPolarGraphSetVar(PetalName,"MajorGridLineSize",2)
			WMPolarGraphSetVar(PetalName,"MinorGridLineSize",2)
			WMPolarGraphSetVar(PetalName,"MajorTickThick",5)
			WMPolarGraphSetVar(PetalName,"MinorTickThick",5)
			WMPolarGraphSetVar(PetalName,"TickLabelFontSize",14)
					
			for(i=0; i<NumTemps; i+=1)
			
				PetalName2 = Base_FileName + "_" + Temps[i] + "_R"
				WMPolarAppendTrace(PetalName, $(PetalName2), $"", 360)
				ModifyGraph mode($("PolarY" + num2str(i)))=4,marker($("PolarY" + num2str(i)))=8,msize($("PolarY" + num2str(i)))=4;DelayUpdate
				ModifyGraph mrkThick($("PolarY" + num2str(i)))=2,lstyle($("PolarY" + num2str(i)))=3, lsize($("PolarY" + num2str(i)))=2
			
			endfor
			
				ModifyGraph width=360,height=360
				ModifyGraph margin(top)=72
				ColorScale/C/N=text0  ctab={str2num(Temps[0]),str2num(Temps[NumTemps-1]),ColdWarm,0},fsize=14,fstyle=1,minor=1;DelayUpdate
				ColorScale/C/N=text0 widthPct=50,height=10
				ColorScale/C/N=text0/X=3.10/Y=60.21
				ColorScale/C/N=text0/F=0/B=1/H=20/A=MC vert=0,widthPct=50,heightPct=5;
				ColorScale/C/N=text0/F=0 vert=0
				ColorScale/C/N=text0 "\\f01\\Z14Temperature (K)"
				TextBox/C/N=text1/F=0/A=MB/X=0/Y=-5 "\\f01\\Z14" + Base_FileName
			
		elseif(V_flag==2)
			
			//---Now we can make the Petal Plot---//
			DoWindow/K $(PetalName)
			
			//---Now let's create the window so we have make the graph---//
			Display/W=(50,50,350,320)/N=$(PetalName)
			
			WMNewPolarGraph("", PetalName)
			WMPolarGraphSetVar(PetalName,"RadiusAxisThick",2)
			WMPolarGraphSetVar(PetalName,"AngleAxisThick",2)
			WMPolarGraphSetVar(PetalName,"MajorGridLineSize",2)
			WMPolarGraphSetVar(PetalName,"MinorGridLineSize",2)
			WMPolarGraphSetVar(PetalName,"MajorTickThick",5)
			WMPolarGraphSetVar(PetalName,"MinorTickThick",5)
			WMPolarGraphSetVar(PetalName,"TickLabelFontSize",14)
					
			for(i=0; i<NumTemps; i+=1)
			
				PetalName2 = Base_FileName + "_" + Temps[i] + "_R"
				WMPolarAppendTrace(PetalName, $(PetalName2), $"", 360)
				ModifyGraph mode($("PolarY" + num2str(i)))=4,marker($("PolarY" + num2str(i)))=8,msize($("PolarY" + num2str(i)))=4;DelayUpdate
				ModifyGraph mrkThick($("PolarY" + num2str(i)))=2,lstyle($("PolarY" + num2str(i)))=3, lsize($("PolarY" + num2str(i)))=2
			
			endfor
			
				ModifyGraph width=360,height=360
				ModifyGraph margin(top)=72
				ColorScale/C/N=text0  ctab={str2num(Temps[0]),str2num(Temps[NumTemps-1]),ColdWarm,0},fsize=14,fstyle=1,minor=1;DelayUpdate
				ColorScale/C/N=text0 widthPct=50,height=10
				ColorScale/C/N=text0/X=3.10/Y=60.21
				ColorScale/C/N=text0/F=0/B=1/H=20/A=MC vert=0,widthPct=50,heightPct=5;
				ColorScale/C/N=text0/F=0 vert=0
				ColorScale/C/N=text0 "\\f01\\Z14Temperature (K)"
				TextBox/C/N=text1/F=0/A=MB/X=0/Y=-5 "\\f01\\Z14" + Base_FileName
				
		endif
		
		KBColorizeTraces#KBColorTablePopMenuProc(PetalName,0,"ColdWarm")	

End

//-----------------------------------------------------------------------------------------------------TEMPERATURE DEPENDENCE BUTTON PROCEDURES-----------------------------------------------------------------------------------------------------//

//---This is the procedure for the "Create Petal Plot" button---//
Function RunGetFolder(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			
			GetFolder()
			
	endswitch
	return 0
End

//---This is the procedure for the "Update List" button---//
Function RunCreatePetalPlot(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		
			SVAR PPWave_Name = root:Packages:NickLExtras:PPWave_Name
			MakePetalPlot($PPWave_Name)
			
	endswitch
	return 0
End

//---This is the procedure for the "Update List" button---//
Function RunLoadandDespeckleImages(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		
			LoadandDespeckleImages()
			
	endswitch
	return 0
End

//---This is the procedure for the "Update List" button---//
Function RunTDependMakePolarPlotWaves(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
			
			PetalPlotUpdateRegion()
			TDependMakePolarPlotWaves()
			TDependPolarPlot()
			
	endswitch
	return 0
End

//---This is the procedure for the "Update List" button---//
Function RunPerformAngleCuts(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		
			PerformAngleCuts()
			
	endswitch
	return 0
End

//---This is the procedure for the "Update List" button---//
Function RunTDependPolarPlot(ba) : ButtonControl
	STRUCT WMButtonAction &ba

	switch( ba.eventCode )
		case 2: // mouse up
		
			TDependPolarPlot()
			
	endswitch
	return 0
End


//-----------------------------------------------------------------------------------------------------OLD FUNCTIONS THAT ARE NO LONGER NEEDED-----------------------------------------------------------------------------------------------------//

//---This is a function that combines and despeckles two identical images into a single image---//
Function Despeckle(wave1, wave2, cap)
	WAVE wave1
	WAVE wave2
	Variable cap
	
	Make/O/N=(1024, 1024) Avg
	
	Avg = DespeckleAverage(wave1, wave2, cap)
	
	WaveStats /Q /M=1 Avg
	
	Avg = (Avg == 0) ? V_avg : Avg
	
End

Function DespeckleAverage(value1, value2, cap)
	Variable value1
	Variable value2
	Variable cap
	
	if(value1 < cap && value2 < cap)
		Return (value1 + value2)/2
	elseif(value1 < cap)
		Return value1
	elseif(value2 < cap)
		Return value2
	else
		Return 0
	endif
	
End

//----This function combines and despeckles three identical images into a single image---///
Function Despeckle3(wave1, wave2, wave3, cap)
	Wave wave1, wave2, wave3
	Variable cap
	
	Make/O/N=(512, 512) Avg3
	
	Avg3= DespeckleAverage3(wave1, wave2, wave3, cap)
	
End

Function DespeckleAverage3(Value1, Value2, Value3, Cap)
	Variable Value1, Value2, Value3, Cap
	
	if(value1 < cap && value2 < cap && value3 <cap)
		Return (value1 + value2+value3)/3
	elseif(value1 < cap && value2 < cap)
		Return (value1 + value2)/2
	elseif(value2 < cap && value3 < cap)
		Return (value3 + value2)/2
	elseif(value1 < cap && value3 < cap)
		Return (value3 + value1)/2
	elseif(value1<cap)
		return value1
	elseif(value2<cap)
		return value2
	elseif(value3<cap)
		return value3
	else
		Return 0
	endif
	
End

//---This is old code that I used to plot Image_Name_PPY vs. Image_Name_PPX as a polar plot.  Now replaced by the nice polar plot function---//	
//	//---Lets see if the petal plot exists yet.  If not then we'll create it.  If so then we'll kill it and recreate it with the appropriate wave attached---//
//	DoWindow/HIDE=? $("PetalPlot")
//		
//		if(V_flag==0)
//		
//			//---Now let's create the window so we have make the graph---//
//			Display/W=(50,50,350,320)/N=$("PetalPlot")
//			
//			//---Attach the wave to the image and then set the scales and style---//
//			AppendToGraph/W=$("PetalPlot") $(Image_Name) + "_PPY" vs $(Image_Name) + "_PPx"
//			ModifyGraph/W=$("PetalPlot")  zero=3,mirror=2,standoff=0, width={Aspect,1}
//			ModifyGraph/W=$("PetalPlot") mode=4,marker=41,msize=4,mrkThick=2,lsize=2,lstyle=3, fStyle=1,fSize=16,axThick=2
//			SetAxis/W=$("PetalPlot")/A left 
//			SetAxis/W=$("PetalPlot")/A bottom 
//		
//		elseif(V_flag==1)
//		
//			GetWindow/Z $("PetalPlot") wsize
//			
//			//---Now we can make the Petal Plot---//
//			DoWindow/K $("PetalPlot")
//			
//			//---Now let's create the window so we have make the graph---//
//			Display/W=(V_left,V_top,V_right,V_bottom)/N=$("PetalPlot")
//			
//			//---Attach the wave to the image and then set the scales and style---//
//			AppendToGraph/W=$("PetalPlot") $(Image_Name) + "_PPY" vs $(Image_Name) + "_PPx"
//			ModifyGraph/W=$("PetalPlot")  zero=3,mirror=2,standoff=0, width={Aspect,1}
//			ModifyGraph/W=$("PetalPlot") mode=4,marker=41,msize=4,mrkThick=2,lsize=2,lstyle=3, fStyle=1,fSize=16,axThick=2
//			SetAxis/W=$("PetalPlot")/A left 
//			SetAxis/W=$("PetalPlot")/A bottom 
//			
//		elseif(V_flag==2)
//			
//			//---Now we can make the Petal Plot---//
//			DoWindow/K $("PetalPlot")
//			
//			//---Now let's create the window so we have make the graph---//
//			Display/W=(50,50,350,320)/N=$("PetalPlot")
//			
//			//---Attach the wave to the image and then set the scales and style---//
//			AppendToGraph/W=$("PetalPlot") $(Image_Name) + "_PPY" vs $(Image_Name) + "_PPx"
//			ModifyGraph/W=$("PetalPlot")  zero=3,mirror=2,standoff=0, width={Aspect,1}
//			ModifyGraph/W=$("PetalPlot") mode=4,marker=41,msize=4,mrkThick=2,lsize=2,lstyle=3, fStyle=1,fSize=16,axThick=2
//			SetAxis/W=$("PetalPlot")/A left 
//			SetAxis/W=$("PetalPlot")/A bottom 
//	
//		endif